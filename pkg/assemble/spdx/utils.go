// Copyright 2023 Interlynk.io
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package spdx

import (
	"context"
	"crypto/sha256"
	"fmt"
	"net/url"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/google/uuid"
	"github.com/interlynk-io/sbomasm/pkg/detect"
	"github.com/interlynk-io/sbomasm/pkg/logger"
	"github.com/mitchellh/copystructure"
	"github.com/samber/lo"
	spdx_json "github.com/spdx/tools-golang/json"
	spdx_rdf "github.com/spdx/tools-golang/rdf"
	"github.com/spdx/tools-golang/spdx"
	"github.com/spdx/tools-golang/spdx/v2/common"
	"github.com/spdx/tools-golang/spdx/v2/v2_3"
	spdx_tv "github.com/spdx/tools-golang/tagvalue"
	spdx_yaml "github.com/spdx/tools-golang/yaml"
	"sigs.k8s.io/release-utils/version"
)

func loadBom(ctx context.Context, path string) (*v2_3.Document, error) {
	log := logger.FromContext(ctx)

	var d *v2_3.Document
	var err error

	f, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer f.Close()

	spec, format, err := detect.Detect(f)
	if err != nil {
		return nil, err
	}

	log.Debugf("loading bom:%s spec:%s format:%s", path, spec, format)

	switch format {
	case detect.FileFormatJSON:
		d, err = spdx_json.Read(f)
	case detect.FileFormatTagValue:
		d, err = spdx_tv.Read(f)
	case detect.FileFormatYAML:
		d, err = spdx_yaml.Read(f)
	case detect.FileFormatRDF:
		d, err = spdx_rdf.Read(f)
	default:
		panic("unsupported spdx format")

	}

	if err != nil {
		return nil, err
	}

	return d, nil
}

func utcNowTime() string {
	return time.Now().UTC().Format(time.RFC3339)
}

func cloneComp(c *spdx.Package) (*spdx.Package, error) {
	compCopy, err := copystructure.Copy(c)
	if err != nil {
		return nil, err
	}

	return compCopy.(*spdx.Package), nil
}

func composeNamespace(docName string) string {
	uuid := uuid.New().String()
	path := fmt.Sprintf("%s/%s-%s", "spdxdocs", docName, uuid)
	url := url.URL{
		Scheme: "https",
		Host:   "spdx.org",
		Path:   path,
	}
	return url.String()
}

// If we are merging documents, which are included as external references, we should
// remove those. As they are no longer external references.
func externalDocumentRefs(docs []*v2_3.Document) []v2_3.ExternalDocumentRef {
	currentDocNamespaces := lo.Map(docs, func(doc *v2_3.Document, _ int) string {
		return doc.DocumentNamespace
	})

	refs := []v2_3.ExternalDocumentRef{}

	for _, doc := range docs {
		for _, ref := range doc.ExternalDocumentReferences {
			if !lo.Contains(currentDocNamespaces, ref.URI) {
				refs = append(refs, ref)
			}
		}
	}

	return refs
}

func getAllCreators(docs []*v2_3.Document, authors []Author) []common.Creator {
	var creators []common.Creator
	var uniqCreator = make(map[string]common.Creator)

	for _, doc := range docs {
		if doc.CreationInfo != nil {
			for _, c := range doc.CreationInfo.Creators {
				if c.Creator == "" {
					continue
				}
				if _, ok := uniqCreator[c.Creator]; !ok {
					uniqCreator[c.Creator] = c
					creators = append(creators, c)
				}
			}
		}
	}

	for _, author := range authors {
		authorCreator := ""
		if author.Email == "" {
			authorCreator = author.Name
		} else {
			authorCreator = fmt.Sprintf("%s (%s)", author.Name, author.Email)
		}
		creators = append(creators, common.Creator{
			CreatorType: "Person",
			Creator:     authorCreator,
		})
	}

	sbomAsmCreator := common.Creator{
		CreatorType: "Tool",
		Creator:     fmt.Sprintf("%s-%s", "sbomasm", version.GetVersionInfo().GitVersion),
	}

	creators = append(creators, sbomAsmCreator)
	return creators
}

func getCreatorComments(docs []*v2_3.Document) string {
	comments := lo.Uniq(lo.Map(docs, func(bom *spdx.Document, _ int) string {
		if bom.CreationInfo != nil {
			return bom.CreationInfo.CreatorComment
		}
		return ""
	}))

	docNames := lo.Uniq(lo.Map(docs, func(doc *v2_3.Document, _ int) string {
		return doc.DocumentName
	}))

	sbomasmComment := fmt.Sprintf("Generated by sbomasm (%s) using %s",
		version.GetVersionInfo().GitVersion, strings.Join(docNames, ", "))

	finalComments := append([]string{sbomasmComment}, comments...)

	return strings.Join(finalComments, "\n")
}

func getLicenseListVersion(docs []*v2_3.Document) string {
	versions := lo.Uniq(lo.Map(docs, func(bom *spdx.Document, _ int) string {
		if bom.CreationInfo != nil && bom.CreationInfo.LicenseListVersion != "" {
			return bom.CreationInfo.LicenseListVersion
		}
		return ""
	}))

	if len(versions) == 0 {
		return ""
	}

	sort.Slice(versions, func(i, j int) bool {
		return compareVersions(versions[i], versions[j])
	})

	// fmt.Println("Sorted versions:", versions)
	// fmt.Println("Highest version:", versions[len(versions)-1])

	return versions[len(versions)-1]
}

func compareVersions(a, b string) bool {
	aParts := strings.Split(a, ".")
	bParts := strings.Split(b, ".")

	for i := 0; i < len(aParts) && i < len(bParts); i++ {
		aNum, _ := strconv.Atoi(aParts[i])
		bNum, _ := strconv.Atoi(bParts[i])

		if aNum != bNum {
			return aNum < bNum
		}
	}

	return len(aParts) < len(bParts)
}

func getOtherLicenses(docs []*v2_3.Document) []*v2_3.OtherLicense {
	customLicenses := lo.FlatMap(docs, func(doc *spdx.Document, _ int) []*spdx.OtherLicense {
		return doc.OtherLicenses
	})

	if len(customLicenses) == 0 {
		return nil
	}

	return lo.UniqBy(customLicenses, func(license *spdx.OtherLicense) string {
		// A license would be unique if the identifier is the same & content
		contentList := []string{license.LicenseIdentifier, license.ExtractedText}
		jointContent := strings.Join(contentList, "")

		checksum := sha256.Sum256([]byte(jointContent))
		return fmt.Sprintf("%x", checksum)
	})
}
